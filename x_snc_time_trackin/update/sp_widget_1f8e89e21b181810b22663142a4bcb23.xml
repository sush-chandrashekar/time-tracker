<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, spUtil, $location) {
  var c = this;
c.type= "";
c.note="";
  /* Bindable functions
 -----------------------------------------------*/
$scope.endDateBeforeRender = endDateBeforeRender
$scope.endDateOnSetTime = endDateOnSetTime
$scope.startDateBeforeRender = startDateBeforeRender
$scope.startDateOnSetTime = startDateOnSetTime


console.log(c.data.timeTr);

c.submit = function(){
    if(!c.type){
      spUtil.addErrorMessage("Please Choose a Type");
    } else{
      c.server.get({
        startDate: moment($scope.dateRangeStart).format("YYYY-MM-DD HH:mm:ss"),
        endDate: moment($scope.dateRangeEnd).format("YYYY-MM-DD HH:mm:ss"),
        justDate: moment($scope.dateRangeStart).format("YYYY-MM-DD"),
        note: c.note || '',
        type: c.type		  
      }).then(function (r) {
          if(r.data.returnID){
            spUtil.addInfoMessage("Time Logged in successfully!");
            $location.url('?id=time_tracking_days_review&imt='+r.data.imt);
          }

      });
    }
}

if(c.data.tr){
  $scope.dateRangeStart = moment(c.data.timeTr.checkin).format("YYYY-MM-DD HH:mm:ss");
  $scope.dateRangeEnd = moment(c.data.timeTr.checkout).format("YYYY-MM-DD HH:mm:ss");
  
	c.type = c.data.timeTr.type;
  c.note = c.data.timeTr.note || '';
} else{
  $scope.dateRangeStart = new Date;
  $scope.dateRangeEnd = new Date;
  //$scope.dateRangeStart = moment().format('YYYY-MM-DD HH:mm:ss');
  //$scope.dateRangeEnd = moment().format('YYYY-MM-DD HH:mm:ss');
}




function startDateOnSetTime () {

  console.log($scope.dateRangeStart);
  $scope.$broadcast('start-date-changed');
}

function endDateOnSetTime () {
  console.log($scope.dateRangeEnd);
  $scope.$broadcast('end-date-changed');
}

function startDateBeforeRender ($dates) {

  // if ($scope.dateRangeEnd) {
  //   var activeDate = moment($scope.dateRangeEnd);

  //   $dates.filter(function (date) {
  //     return date.localDateValue() >= activeDate.valueOf()
  //   }).forEach(function (date) {
  //     date.selectable = false;
  //   })
  // }


}

function calcRange(date, activeDate, nextDay){
  if(date.localDateValue() <= activeDate.valueOf()){
      return true;
  } else if(date.localDateValue() > nextDay.getTime()){
    return true;
  }
}

function endDateBeforeRender ($view, $dates, $leftDate, $upDate, $rightDate) {

  //$scope.dateRangeEnd = $scope.dateRangeStart;
  if ($scope.dateRangeStart) {
	  //
    var nextDay = new Date($scope.dateRangeStart);
    nextDay.setDate(nextDay.getDate() + 1);
    nextDay.setHours(0,0,0,0);
    nextDay = moment(nextDay).subtract(1, 'minutes').toDate();

    var activeDate = moment($scope.dateRangeStart).subtract(1, $view).add(1, 'minute');

    $dates.filter(function (date) {
      return (calcRange(date, activeDate, nextDay));
    }).forEach(function (date) {
      date.selectable = false;
    });
  }
}


}]]></client_script>
        <controller_as>c</controller_as>
        <css>.form-group.required .control-label:after {
  content:"*";
  color:red;
}
.select-form{
  min-height: 75px;
}
.select-div {
  position: absolute;
  width: 90%;

  select {

    border-radius: 3px;
    font-size: 16px;
    color: gray;
    height: 42px;
    appearance: none;
    -moz-appearance: none;
    -webkit-appearance: none;

    &amp;:focus {
      outline: none;
      box-shadow: none;
      border: solid 1px grey;
    }
  }

  .select-side {
    &amp;:before {
      border-left: solid 1px lightgrey;
      content : "";
      position: absolute;
      left    : 0;
      bottom  : 0;
      height  : 100%;
      width   : 1px;  /* or 100px */
    }

    width: 40px;
    position: absolute;
    top: 0px;
    background-color: #f1f1f1;
    height: 100%;
    left: 88%;
    border-radius: 0px 3px 3px 0px;
    border-right: solid 1px #ccc;
    border-top: solid 1px #ccc;
    border-bottom: solid 1px #ccc;
    pointer-events:none;

    i {
      &amp;.blue {
        color: #000;
      }

      left: 30%;
      top: 12px;
    }
  }
}

h3{
  margin-bottom: 20px;
  font-weight: bold;
}

input.cal-input{
  @media only screen and (min-device-width: 320px) and (max-device-width: 568px) and (-webkit-min-device-pixel-ratio: 2) {
    height: 50px;
    font-size: 20px;
  }
}

label{
  @media only screen and (min-device-width: 320px) and (max-device-width: 568px) and (-webkit-min-device-pixel-ratio: 2) {

    font-size: 20px;
  }
}

select{
  @media only screen and (min-device-width: 320px) and (max-device-width: 568px) and (-webkit-min-device-pixel-ratio: 2) {

    height: 45px;
  }
}

.btn-primary{
  @media only screen and (min-device-width: 320px) and (max-device-width: 568px) and (-webkit-min-device-pixel-ratio: 2) {
    height: 50px;
    font-size: 18px;
    width: 100%;
    margin-top: 20px;
  }
}
.dropdown-menu{
  @media only screen and (min-device-width: 320px) and (max-device-width: 568px) and (-webkit-min-device-pixel-ratio: 2) {
    font-size: 18px;
  }
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>time_tracker_clock_in_and_out</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>TIme Tracker Clock in and out</name>
        <option_schema/>
        <public>false</public>
        <roles>x_snc_time_trackin.user</roles>
        <script><![CDATA[(function () {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
  var imt = $sp.getParameter('imt');
  var tr = $sp.getParameter('tr');
  data.tr = tr;

  if (!input) {
    data.timeTr = {};
    data.choices = [];
    var choiceGr = new GlideRecord('sys_choice');
    choiceGr.addQuery('name', 'x_snc_time_trackin_time_tracker');
    choiceGr.addQuery('element', 'type');
    choiceGr.orderBy('sequence');
    choiceGr.query();
    while (choiceGr.next()) {
      var temp = {};
      temp.name = choiceGr.getDisplayValue('label');
      temp.value = choiceGr.getDisplayValue('label');
      data.choices.push(temp);
    }

    if (tr) {

      var trGr = new GlideRecord('x_snc_time_trackin_time_tracker');
      trGr.addQuery('sys_id', tr);
      trGr.query();
      if (trGr.next()) {
        data.timeTr.duration = trGr.getDisplayValue('duration');
        data.timeTr.checkin = trGr.getDisplayValue('check_in');
        data.timeTr.checkout = trGr.getDisplayValue('check_out');
        data.timeTr.note = trGr.getDisplayValue('note') || '';
        data.timeTr.type = trGr.getDisplayValue('type');
        data.timeTr.imtName = trGr.parent.name.getDisplayValue();
        data.timeTr.dateTd = trGr.getDisplayValue('time_card_daily');
      }
    }

  } else {
    if (input.startDate && !tr) {
      $sp.log('no tr update');
      var dateValue = new GlideDateTime(input.startDate);
      dateValue = dateValue.getLocalDate();

      $sp.log(dateValue);

      var gr = new GlideRecord('time_card_daily');
      gr.addQuery('date', dateValue);
      gr.addQuery('u_user', gs.getUserID());
      gr.addQuery('u_parent', imt);
      gr.query();
      if (gr.next()) {

        var gdtStart = new GlideDateTime(input.startDate);
        gdtStart.setDisplayValueInternal(input.startDate);

        $sp.log(gdtStart.getValue());

        var gdtEnd = new GlideDateTime(input.endDate);
        gdtEnd.setDisplayValueInternal(input.endDate);

        $sp.log(gdtEnd.getValue());


        var ttgr = new GlideRecord('x_snc_time_trackin_time_tracker');
        ttgr.initialize();
        ttgr.setValue('check_in', gdtStart.getValue());
        ttgr.setValue('check_out', gdtEnd.getValue());
        ttgr.setValue('parent', imt);
        ttgr.setValue('user', gs.getUserID());
        ttgr.setValue('time_card_daily', gr.sys_id.toString());
        ttgr.setValue('type', input.type);
        ttgr.setValue('note', input.note);
        data.returnID = ttgr.insert();
        data.tdID = gr.sys_id.toString();
        data.imt = $sp.getParameter('imt');
      }
    } else if(tr && input.startDate){
      $sp.log('tr update');
      var gdtStart = new GlideDateTime(input.startDate);
      gdtStart.setDisplayValueInternal(input.startDate);

      $sp.log(gdtStart.getValue());

      var gdtEnd = new GlideDateTime(input.endDate);
      gdtEnd.setDisplayValueInternal(input.endDate);

      var trGr = new GlideRecord('x_snc_time_trackin_time_tracker');
      trGr.addQuery('sys_id', tr);
      trGr.query();
      if (trGr.next()) {
        trGr.setValue('check_in', gdtStart.getValue());
        trGr.setValue('check_out', gdtEnd.getValue());
        trGr.setValue('type', input.type);
        trGr.setValue('note', input.note);
        data.returnID = trGr.update();
        data.imt = $sp.getParameter('imt');
        data.tdID = trGr.time_card_daily.toString();
      }

    }
  }



})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>sush.chan</sys_created_by>
        <sys_created_on>2020-04-23 17:33:56</sys_created_on>
        <sys_id>1f8e89e21b181810b22663142a4bcb23</sys_id>
        <sys_mod_count>206</sys_mod_count>
        <sys_name>TIme Tracker Clock in and out</sys_name>
        <sys_package display_value="Time Tracking" source="x_snc_time_trackin">54476f311b14d410b22663142a4bcbc6</sys_package>
        <sys_policy/>
        <sys_scope display_value="Time Tracking">54476f311b14d410b22663142a4bcbc6</sys_scope>
        <sys_update_name>sp_widget_1f8e89e21b181810b22663142a4bcb23</sys_update_name>
        <sys_updated_by>brett.karl</sys_updated_by>
        <sys_updated_on>2020-05-01 15:39:31</sys_updated_on>
        <template><![CDATA[<div class="clock-in-out col-md-12">
  <!-- <div class="dropdown">
  <a class="dropdown-toggle" id="dropdown2" role="button" data-toggle="dropdown" data-target="#" href="javascript:void(0)">
    <div class="input-group"><input type="text" class="form-control" data-ng-model="data.dateDropDownInput"><span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
    </div>
  </a>
  <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
    <datetimepicker data-ng-model="data.dateDropDownInput" data-on-set-time="onTimeSet(newDate, oldDate)" data-datetimepicker-config="{ dropdownSelector: '#dropdown2',minuteStep:10 }"/>
  </ul>
</div> -->

  <div class="text-center">
    <h3>Clock In/Out </h3>
  </div>
  <div class="dropdown form-group dropdown-start-parent">
    <label>Clock In</label>
    <a class="dropdown-toggle" id="dropdownStart" role="button" data-toggle="dropdown"
      data-target=".dropdown-start-parent" href="javascript:void(0)">
      <div class="input-group date">
        <input ng-required="true" type="text" class="form-control cal-input" data-ng-model="dateRangeStart">
        <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
      </div>
    </a>
    <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
      <datetimepicker ng-required="true" data-ng-model="dateRangeStart"
        data-datetimepicker-config="{ dropdownSelector: '#dropdownStart', renderOn: 'end-date-changed',minuteStep:5, startView:'hour'}"
        data-on-set-time="startDateOnSetTime()" data-before-render="startDateBeforeRender($dates)"></datetimepicker>
    </ul>
  </div>

  <div class="dropdown form-group dropdown-end-parent">
    <label>Clock Out</label>
    <a class="dropdown-toggle" id="dropdownEnd" role="button" data-toggle="dropdown" data-target=".dropdown-end-parent"
      href="javascript:void(0)">
      <div class="input-group date">
        <input type="text" class="form-control cal-input" data-ng-model="dateRangeEnd">
        <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
      </div>
    </a>
    <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
      <datetimepicker data-ng-model="dateRangeEnd"
        data-datetimepicker-config="{ dropdownSelector: '#dropdownEnd', renderOn: 'start-date-changed' ,minuteStep:5, startView:'hour'}"
        data-on-set-time="endDateOnSetTime()"
        data-before-render="endDateBeforeRender($view, $dates, $leftDate, $upDate, $rightDate)"></datetimepicker>
    </ul>
  </div>

  <div class="form-group required select-form">
    <label class="control-label" for="exampleFormControlSelect1">Type</label>
    <div class="select-div">
      <div class="select-side">
        <i class="glyphicon glyphicon-menu-down blue"></i>
      </div>
      <select class="form-control" id="exampleFormControlSelect1" ng-model="c.type">
        <option ng-repeat="option in c.data.choices" value="{{option.value}}">{{option.name}}</option>
      </select>
    </div>

  </div>

  <div class="form-group">
    <label for="comment">Note:</label>
    <textarea maxlength="500" class="form-control" ng-model="c.note" rows="3" id="comment"></textarea>
  </div>

  <div class="form-group">
    <button ng-click="c.submit()" class="btn btn-primary mb-2">Submit</button>
  </div>


</div>]]></template>
    </sp_widget>
</record_update>
